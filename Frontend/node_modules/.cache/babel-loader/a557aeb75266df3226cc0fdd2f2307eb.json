{"ast":null,"code":"const perspective = require('gl-mat4/perspective');\n\nconst multiply = require('gl-mat4/multiply');\n\nconst lookAt = require('gl-mat4/lookAt');\n\nconst invert = require('gl-mat4/invert');\n\nconst rotate = require('gl-mat4/rotate');\n\nconst transform = require('gl-vec3/transformMat4');\n\nconst SVG_NS = 'http://www.w3.org/2000/svg';\nmodule.exports = {\n  calculateSizingOptions,\n  createLogoViewer,\n  createModelRenderer,\n  loadModelFromJson,\n  positionsFromModel,\n  createPolygonsFromModelJson,\n  createStandardModelPolygon,\n  createMatrixComputer,\n  compareZ,\n  createFaceUpdater,\n  createNode,\n  setAttribute,\n  svgElementToSvgImageContent,\n  Polygon\n};\n\nfunction createLogoViewer(container, renderScene, {\n  followMouse = false,\n  followMotion = false,\n  slowDrift = false,\n  lazyRender = true\n} = {}) {\n  let shouldRender = true;\n  const mouse = {\n    x: 0,\n    y: 0\n  };\n  const lookCurrent = [0, 0];\n  const lookRate = 0.3; // closes over scene state\n\n  const renderCurrentScene = () => {\n    updateLookCurrent();\n    renderScene(lookCurrent, slowDrift);\n  };\n\n  function setLookAtTarget(target) {\n    const bounds = container.getBoundingClientRect();\n    mouse.x = 1.0 - 2.0 * (target.x - bounds.left) / bounds.width;\n    mouse.y = 1.0 - 2.0 * (target.y - bounds.top) / bounds.height;\n  }\n\n  function stopAnimation() {\n    shouldRender = false;\n  }\n\n  function startAnimation() {\n    shouldRender = true;\n  }\n\n  function setFollowMouse(state) {\n    // eslint-disable-next-line no-param-reassign\n    followMouse = state;\n  }\n\n  function setFollowMotion(state) {\n    // eslint-disable-next-line no-param-reassign\n    followMotion = state;\n  }\n\n  window.addEventListener('mousemove', function (ev) {\n    if (!shouldRender) {\n      startAnimation();\n    }\n\n    if (followMouse) {\n      setLookAtTarget({\n        x: ev.clientX,\n        y: ev.clientY\n      });\n      renderCurrentScene();\n    }\n  });\n  window.addEventListener('deviceorientation', function (event) {\n    if (!shouldRender) {\n      startAnimation();\n    }\n\n    if (followMotion) {\n      // gamma: left to right\n      const leftToRight = event.gamma; // beta: front back motion\n\n      const frontToBack = event.beta; // x offset: needed to correct the intial position\n\n      const xOffset = 200; // y offset: needed to correct the intial position\n\n      const yOffset = -300; // acceleration\n\n      const acceleration = 10;\n      setLookAtTarget({\n        x: xOffset + leftToRight * acceleration,\n        y: yOffset + frontToBack * acceleration\n      });\n      renderCurrentScene();\n    }\n  });\n\n  function lookAtAndRender(target) {\n    // update look target\n    setLookAtTarget(target); // this should prolly just call updateLookCurrent or set lookCurrent values to eaxactly lookTarget\n    // but im not really sure why its different, so im leaving it alone\n\n    lookCurrent[0] = mouse.x;\n    lookCurrent[1] = mouse.y + 0.085 / lookRate;\n    renderCurrentScene();\n  }\n\n  function renderLoop() {\n    if (!shouldRender) {\n      return;\n    }\n\n    window.requestAnimationFrame(renderLoop);\n    renderCurrentScene();\n  }\n\n  function updateLookCurrent() {\n    const li = 1.0 - lookRate;\n    lookCurrent[0] = li * lookCurrent[0] + lookRate * mouse.x;\n    lookCurrent[1] = li * lookCurrent[1] + lookRate * mouse.y + 0.085;\n  }\n\n  if (lazyRender) {\n    renderCurrentScene();\n  } else {\n    renderLoop();\n  }\n\n  return {\n    container,\n    lookAt: setLookAtTarget,\n    setFollowMouse,\n    setFollowMotion,\n    stopAnimation,\n    startAnimation,\n    lookAtAndRender,\n    renderCurrentScene\n  };\n}\n\nfunction loadModelFromJson(modelJson, createSvgPolygon = createStandardModelPolygon) {\n  const vertCount = modelJson.positions.length;\n  const positions = new Float32Array(3 * vertCount);\n  const transformed = new Float32Array(3 * vertCount);\n  const {\n    polygons,\n    polygonsByChunk\n  } = createPolygonsFromModelJson(modelJson, createSvgPolygon);\n  positionsFromModel(positions, modelJson);\n  const updatePositions = createPositionUpdater(positions, transformed, vertCount);\n  const modelObj = {\n    updatePositions,\n    positions,\n    transformed,\n    polygons,\n    polygonsByChunk\n  };\n  return modelObj;\n}\n\nfunction createModelRenderer(container, cameraDistance, modelObj) {\n  const {\n    updatePositions,\n    transformed,\n    polygons\n  } = modelObj;\n\n  for (const polygon of polygons) {\n    container.appendChild(polygon.svg);\n  }\n\n  const computeMatrix = createMatrixComputer(cameraDistance);\n  const updateFaces = createFaceUpdater(container, polygons, transformed);\n  return (rect, lookPos, slowDrift) => {\n    const matrix = computeMatrix(rect, lookPos, slowDrift);\n    updatePositions(matrix);\n    updateFaces(rect, container, polygons, transformed);\n  };\n}\n\nfunction positionsFromModel(positions, modelJson) {\n  const pp = modelJson.positions;\n  let ptr = 0;\n\n  for (let i = 0; i < pp.length; ++i) {\n    const p = pp[i];\n\n    for (let j = 0; j < 3; ++j) {\n      positions[ptr] = p[j];\n      ptr += 1;\n    }\n  }\n}\n\nfunction createPolygonsFromModelJson(modelJson, createSvgPolygon) {\n  const polygons = [];\n  const polygonsByChunk = modelJson.chunks.map(chunk => {\n    const {\n      faces\n    } = chunk;\n    return faces.map(face => {\n      const svgPolygon = createSvgPolygon(chunk);\n      const polygon = new Polygon(svgPolygon, face);\n      polygons.push(polygon);\n      return polygon;\n    });\n  });\n  return {\n    polygons,\n    polygonsByChunk\n  };\n}\n\nfunction createStandardModelPolygon(chunk) {\n  const color = `rgb(${chunk.color})`;\n  const svgPolygon = createNode('polygon');\n  setAttribute(svgPolygon, 'fill', color);\n  setAttribute(svgPolygon, 'stroke', color);\n  setAttribute(svgPolygon, 'points', '0,0, 10,0, 0,10');\n  return svgPolygon;\n}\n\nfunction createMatrixComputer(distance) {\n  const objectCenter = new Float32Array(3);\n  const up = new Float32Array([0, 1, 0]);\n  const projection = new Float32Array(16);\n  const model = new Float32Array(16);\n  const view = lookAt(new Float32Array(16), new Float32Array([0, 0, distance]), objectCenter, up);\n  const invView = invert(new Float32Array(16), view);\n  const invProjection = new Float32Array(16);\n  const target = new Float32Array(3);\n  const transformedMatrix = new Float32Array(16);\n  const X = new Float32Array([1, 0, 0]);\n  const Y = new Float32Array([0, 1, 0]);\n  const Z = new Float32Array([0, 0, 1]);\n  return (rect, lookPos, slowDrift) => {\n    const viewportWidth = rect.width;\n    const viewportHeight = rect.height;\n    perspective(projection, Math.PI / 4.0, viewportWidth / viewportHeight, 100.0, 1000.0);\n    invert(invProjection, projection);\n    target[0] = lookPos[0];\n    target[1] = lookPos[1];\n    target[2] = 1.2;\n    transform(target, target, invProjection);\n    transform(target, target, invView);\n    lookAt(model, objectCenter, target, up); // this shouldnt operate directly on the matrix/model,\n    // it should likely operate on the lookPos\n    // if we do want to operate on the matrix/model, it shouldnt happen here\n\n    if (slowDrift) {\n      const time = Date.now() / 1000.0;\n      rotate(model, model, 0.1 + Math.sin(time / 3) * 0.2, X);\n      rotate(model, model, -0.1 + Math.sin(time / 2) * 0.03, Z);\n      rotate(model, model, 0.5 + Math.sin(time / 3) * 0.2, Y);\n    }\n\n    multiply(transformedMatrix, projection, view);\n    multiply(transformedMatrix, transformedMatrix, model);\n    return transformedMatrix;\n  };\n}\n\nfunction createPositionUpdater(positions, transformed, vertCount) {\n  return M => {\n    const m00 = M[0];\n    const m01 = M[1];\n    const m02 = M[2];\n    const m03 = M[3];\n    const m10 = M[4];\n    const m11 = M[5];\n    const m12 = M[6];\n    const m13 = M[7];\n    const m20 = M[8];\n    const m21 = M[9];\n    const m22 = M[10];\n    const m23 = M[11];\n    const m30 = M[12];\n    const m31 = M[13];\n    const m32 = M[14];\n    const m33 = M[15];\n\n    for (let i = 0; i < vertCount; ++i) {\n      const x = positions[3 * i];\n      const y = positions[3 * i + 1];\n      const z = positions[3 * i + 2];\n      const tw = x * m03 + y * m13 + z * m23 + m33;\n      transformed[3 * i] = (x * m00 + y * m10 + z * m20 + m30) / tw;\n      transformed[3 * i + 1] = (x * m01 + y * m11 + z * m21 + m31) / tw;\n      transformed[3 * i + 2] = (x * m02 + y * m12 + z * m22 + m32) / tw;\n    }\n  };\n}\n\nfunction compareZ(a, b) {\n  return b.zIndex - a.zIndex;\n}\n\nfunction createFaceUpdater(container, polygons, transformed) {\n  const toDraw = [];\n  return rect => {\n    let i;\n    const w = rect.width;\n    const h = rect.height;\n    toDraw.length = 0;\n\n    for (i = 0; i < polygons.length; ++i) {\n      const poly = polygons[i];\n      const {\n        indices\n      } = poly;\n      const i0 = indices[0];\n      const i1 = indices[1];\n      const i2 = indices[2];\n      const ax = transformed[3 * i0];\n      const ay = transformed[3 * i0 + 1];\n      const bx = transformed[3 * i1];\n      const by = transformed[3 * i1 + 1];\n      const cx = transformed[3 * i2];\n      const cy = transformed[3 * i2 + 1];\n      const det = (bx - ax) * (cy - ay) - (by - ay) * (cx - ax);\n\n      if (det < 0) {\n        continue;\n      }\n\n      const points = [];\n      let zmax = -Infinity;\n      let zmin = Infinity;\n      const element = poly.svg;\n\n      for (let j = 0; j < 3; ++j) {\n        const idx = indices[j];\n        points.push(`${0.5 * w * (1.0 - transformed[3 * idx])},${0.5 * h * (1.0 - transformed[3 * idx + 1])}`);\n        const z = transformed[3 * idx + 2];\n        zmax = Math.max(zmax, z);\n        zmin = Math.min(zmin, z);\n      }\n\n      poly.zIndex = zmax + 0.25 * zmin;\n      const joinedPoints = points.join(' ');\n\n      if (joinedPoints.indexOf('NaN') === -1) {\n        setAttribute(element, 'points', joinedPoints);\n      }\n\n      toDraw.push(poly);\n    }\n\n    toDraw.sort(compareZ);\n    container.innerHTML = '';\n\n    for (i = 0; i < toDraw.length; ++i) {\n      container.appendChild(toDraw[i].svg);\n    }\n  };\n}\n\nfunction calculateSizingOptions(options = {}) {\n  let width = options.width || 400;\n  let height = options.height || 400;\n\n  if (!options.pxNotRatio) {\n    width = window.innerWidth * (options.width || 0.25) | 0;\n    height = (window.innerHeight * options.height || width) | 0;\n\n    if ('minWidth' in options && width < options.minWidth) {\n      width = options.minWidth;\n      height = options.minWidth * options.height / options.width | 0;\n    }\n  }\n\n  return {\n    width,\n    height\n  };\n}\n\nfunction createNode(type) {\n  return document.createElementNS(SVG_NS, type);\n}\n\nfunction setAttribute(node, attribute, value) {\n  node.setAttributeNS(null, attribute, value);\n}\n\nfunction svgElementToSvgImageContent(svgElement) {\n  const inner = svgElement.innerHTML;\n  const head = `<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\"> ` + `<svg width=\"521px\" height=\"521px\" version=\"1.1\" baseProfile=\"full\" xmlns=\"${SVG_NS}\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:ev=\"http://www.w3.org/2001/xml-events\">`;\n  const foot = '</svg>';\n  const content = head + inner + foot;\n  return content;\n}\n\nfunction Polygon(svg, indices) {\n  this.svg = svg;\n  this.indices = indices;\n  this.zIndex = 0;\n}","map":{"version":3,"sources":["/Users/joao/Code/DCARP/pd-companies/node_modules/@metamask/logo/util.js"],"names":["perspective","require","multiply","lookAt","invert","rotate","transform","SVG_NS","module","exports","calculateSizingOptions","createLogoViewer","createModelRenderer","loadModelFromJson","positionsFromModel","createPolygonsFromModelJson","createStandardModelPolygon","createMatrixComputer","compareZ","createFaceUpdater","createNode","setAttribute","svgElementToSvgImageContent","Polygon","container","renderScene","followMouse","followMotion","slowDrift","lazyRender","shouldRender","mouse","x","y","lookCurrent","lookRate","renderCurrentScene","updateLookCurrent","setLookAtTarget","target","bounds","getBoundingClientRect","left","width","top","height","stopAnimation","startAnimation","setFollowMouse","state","setFollowMotion","window","addEventListener","ev","clientX","clientY","event","leftToRight","gamma","frontToBack","beta","xOffset","yOffset","acceleration","lookAtAndRender","renderLoop","requestAnimationFrame","li","modelJson","createSvgPolygon","vertCount","positions","length","Float32Array","transformed","polygons","polygonsByChunk","updatePositions","createPositionUpdater","modelObj","cameraDistance","polygon","appendChild","svg","computeMatrix","updateFaces","rect","lookPos","matrix","pp","ptr","i","p","j","chunks","map","chunk","faces","face","svgPolygon","push","color","distance","objectCenter","up","projection","model","view","invView","invProjection","transformedMatrix","X","Y","Z","viewportWidth","viewportHeight","Math","PI","time","Date","now","sin","M","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","m33","z","tw","a","b","zIndex","toDraw","w","h","poly","indices","i0","i1","i2","ax","ay","bx","by","cx","cy","det","points","zmax","Infinity","zmin","element","idx","max","min","joinedPoints","join","indexOf","sort","innerHTML","options","pxNotRatio","innerWidth","innerHeight","minWidth","type","document","createElementNS","node","attribute","value","setAttributeNS","svgElement","inner","head","foot","content"],"mappings":"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","sourcesContent":["const perspective = require('gl-mat4/perspective')\nconst multiply = require('gl-mat4/multiply')\nconst lookAt = require('gl-mat4/lookAt')\nconst invert = require('gl-mat4/invert')\nconst rotate = require('gl-mat4/rotate')\nconst transform = require('gl-vec3/transformMat4')\n\nconst SVG_NS = 'http://www.w3.org/2000/svg'\n\nmodule.exports = {\n  calculateSizingOptions,\n  createLogoViewer,\n  createModelRenderer,\n  loadModelFromJson,\n  positionsFromModel,\n  createPolygonsFromModelJson,\n  createStandardModelPolygon,\n  createMatrixComputer,\n  compareZ,\n  createFaceUpdater,\n  createNode,\n  setAttribute,\n  svgElementToSvgImageContent,\n  Polygon,\n}\n\nfunction createLogoViewer (container, renderScene, {\n  followMouse = false,\n  followMotion = false,\n  slowDrift = false,\n  lazyRender = true,\n} = {}) {\n\n  let shouldRender = true\n  const mouse = {\n    x: 0,\n    y: 0,\n  }\n  const lookCurrent = [0, 0]\n  const lookRate = 0.3\n\n  // closes over scene state\n  const renderCurrentScene = () => {\n    updateLookCurrent()\n    renderScene(lookCurrent, slowDrift)\n  }\n\n  function setLookAtTarget (target) {\n    const bounds = container.getBoundingClientRect()\n    mouse.x = 1.0 - ((2.0 * (target.x - bounds.left)) / bounds.width)\n    mouse.y = 1.0 - ((2.0 * (target.y - bounds.top)) / bounds.height)\n  }\n\n  function stopAnimation () {\n    shouldRender = false\n  }\n  function startAnimation () {\n    shouldRender = true\n  }\n  function setFollowMouse (state) {\n    // eslint-disable-next-line no-param-reassign\n    followMouse = state\n  }\n  function setFollowMotion (state) {\n    // eslint-disable-next-line no-param-reassign\n    followMotion = state\n  }\n\n  window.addEventListener('mousemove', function (ev) {\n    if (!shouldRender) {\n      startAnimation()\n    }\n    if (followMouse) {\n      setLookAtTarget({\n        x: ev.clientX,\n        y: ev.clientY,\n      })\n      renderCurrentScene()\n    }\n  })\n\n  window.addEventListener('deviceorientation', function (event) {\n    if (!shouldRender) {\n      startAnimation()\n    }\n    if (followMotion) {\n      // gamma: left to right\n      const leftToRight = event.gamma\n      // beta: front back motion\n      const frontToBack = event.beta\n      // x offset: needed to correct the intial position\n      const xOffset = 200\n      // y offset: needed to correct the intial position\n      const yOffset = -300\n      // acceleration\n      const acceleration = 10\n\n      setLookAtTarget({\n        x: xOffset + (leftToRight * acceleration),\n        y: yOffset + (frontToBack * acceleration),\n      })\n      renderCurrentScene()\n    }\n  })\n\n  function lookAtAndRender (target) {\n    // update look target\n    setLookAtTarget(target)\n    // this should prolly just call updateLookCurrent or set lookCurrent values to eaxactly lookTarget\n    // but im not really sure why its different, so im leaving it alone\n    lookCurrent[0] = mouse.x\n    lookCurrent[1] = mouse.y + (0.085 / lookRate)\n    renderCurrentScene()\n  }\n\n  function renderLoop () {\n    if (!shouldRender) {\n      return\n    }\n    window.requestAnimationFrame(renderLoop)\n    renderCurrentScene()\n  }\n\n  function updateLookCurrent () {\n    const li = (1.0 - lookRate)\n    lookCurrent[0] = (li * lookCurrent[0]) + (lookRate * mouse.x)\n    lookCurrent[1] = (li * lookCurrent[1]) + (lookRate * mouse.y) + 0.085\n  }\n\n  if (lazyRender) {\n    renderCurrentScene()\n  } else {\n    renderLoop()\n  }\n\n  return {\n    container,\n    lookAt: setLookAtTarget,\n    setFollowMouse,\n    setFollowMotion,\n    stopAnimation,\n    startAnimation,\n    lookAtAndRender,\n    renderCurrentScene,\n  }\n}\n\nfunction loadModelFromJson (modelJson, createSvgPolygon = createStandardModelPolygon) {\n  const vertCount = modelJson.positions.length\n  const positions = new Float32Array(3 * vertCount)\n  const transformed = new Float32Array(3 * vertCount)\n  const { polygons, polygonsByChunk } = createPolygonsFromModelJson(modelJson, createSvgPolygon)\n  positionsFromModel(positions, modelJson)\n  const updatePositions = createPositionUpdater(positions, transformed, vertCount)\n  const modelObj = { updatePositions, positions, transformed, polygons, polygonsByChunk }\n  return modelObj\n}\n\nfunction createModelRenderer (container, cameraDistance, modelObj) {\n  const { updatePositions, transformed, polygons } = modelObj\n\n  for (const polygon of polygons) {\n    container.appendChild(polygon.svg)\n  }\n\n  const computeMatrix = createMatrixComputer(cameraDistance)\n  const updateFaces = createFaceUpdater(container, polygons, transformed)\n\n  return (rect, lookPos, slowDrift) => {\n    const matrix = computeMatrix(rect, lookPos, slowDrift)\n    updatePositions(matrix)\n    updateFaces(rect, container, polygons, transformed)\n  }\n}\n\nfunction positionsFromModel (positions, modelJson) {\n  const pp = modelJson.positions\n  let ptr = 0\n  for (let i = 0; i < pp.length; ++i) {\n    const p = pp[i]\n    for (let j = 0; j < 3; ++j) {\n      positions[ptr] = p[j]\n      ptr += 1\n    }\n  }\n}\n\nfunction createPolygonsFromModelJson (modelJson, createSvgPolygon) {\n  const polygons = []\n  const polygonsByChunk = modelJson.chunks.map((chunk) => {\n    const { faces } = chunk\n    return faces.map((face) => {\n      const svgPolygon = createSvgPolygon(chunk)\n      const polygon = new Polygon(svgPolygon, face)\n      polygons.push(polygon)\n      return polygon\n    })\n  })\n  return { polygons, polygonsByChunk }\n}\n\nfunction createStandardModelPolygon (chunk) {\n  const color = `rgb(${chunk.color})`\n  const svgPolygon = createNode('polygon')\n  setAttribute(\n    svgPolygon,\n    'fill',\n    color,\n  )\n  setAttribute(\n    svgPolygon,\n    'stroke',\n    color,\n  )\n  setAttribute(\n    svgPolygon,\n    'points',\n    '0,0, 10,0, 0,10',\n  )\n  return svgPolygon\n}\n\nfunction createMatrixComputer (distance) {\n  const objectCenter = new Float32Array(3)\n  const up = new Float32Array([0, 1, 0])\n  const projection = new Float32Array(16)\n  const model = new Float32Array(16)\n  const view = lookAt(\n    new Float32Array(16),\n    new Float32Array([0, 0, distance]),\n    objectCenter,\n    up,\n  )\n  const invView = invert(new Float32Array(16), view)\n  const invProjection = new Float32Array(16)\n  const target = new Float32Array(3)\n  const transformedMatrix = new Float32Array(16)\n\n  const X = new Float32Array([1, 0, 0])\n  const Y = new Float32Array([0, 1, 0])\n  const Z = new Float32Array([0, 0, 1])\n\n  return (rect, lookPos, slowDrift) => {\n    const viewportWidth = rect.width\n    const viewportHeight = rect.height\n    perspective(\n      projection,\n      Math.PI / 4.0,\n      viewportWidth / viewportHeight,\n      100.0,\n      1000.0,\n    )\n    invert(invProjection, projection)\n    target[0] = lookPos[0]\n    target[1] = lookPos[1]\n    target[2] = 1.2\n    transform(target, target, invProjection)\n    transform(target, target, invView)\n    lookAt(\n      model,\n      objectCenter,\n      target,\n      up,\n    )\n\n    // this shouldnt operate directly on the matrix/model,\n    // it should likely operate on the lookPos\n    // if we do want to operate on the matrix/model, it shouldnt happen here\n    if (slowDrift) {\n      const time = (Date.now() / 1000.0)\n      rotate(model, model, 0.1 + (Math.sin(time / 3) * 0.2), X)\n      rotate(model, model, -0.1 + (Math.sin(time / 2) * 0.03), Z)\n      rotate(model, model, 0.5 + (Math.sin(time / 3) * 0.2), Y)\n    }\n\n    multiply(transformedMatrix, projection, view)\n    multiply(transformedMatrix, transformedMatrix, model)\n\n    return transformedMatrix\n  }\n}\n\nfunction createPositionUpdater (positions, transformed, vertCount) {\n  return (M) => {\n    const m00 = M[0]\n    const m01 = M[1]\n    const m02 = M[2]\n    const m03 = M[3]\n    const m10 = M[4]\n    const m11 = M[5]\n    const m12 = M[6]\n    const m13 = M[7]\n    const m20 = M[8]\n    const m21 = M[9]\n    const m22 = M[10]\n    const m23 = M[11]\n    const m30 = M[12]\n    const m31 = M[13]\n    const m32 = M[14]\n    const m33 = M[15]\n\n    for (let i = 0; i < vertCount; ++i) {\n      const x = positions[3 * i]\n      const y = positions[(3 * i) + 1]\n      const z = positions[(3 * i) + 2]\n\n      const tw = (x * m03) + (y * m13) + (z * m23) + m33\n      transformed[3 * i] =\n        ((x * m00) + (y * m10) + (z * m20) + m30) / tw\n      transformed[(3 * i) + 1] =\n        ((x * m01) + (y * m11) + (z * m21) + m31) / tw\n      transformed[(3 * i) + 2] =\n        ((x * m02) + (y * m12) + (z * m22) + m32) / tw\n    }\n  }\n}\n\nfunction compareZ (a, b) {\n  return b.zIndex - a.zIndex\n}\n\nfunction createFaceUpdater (container, polygons, transformed) {\n  const toDraw = []\n  return (rect) => {\n    let i\n    const w = rect.width\n    const h = rect.height\n    toDraw.length = 0\n    for (i = 0; i < polygons.length; ++i) {\n      const poly = polygons[i]\n      const { indices } = poly\n\n      const i0 = indices[0]\n      const i1 = indices[1]\n      const i2 = indices[2]\n      const ax = transformed[3 * i0]\n      const ay = transformed[(3 * i0) + 1]\n      const bx = transformed[3 * i1]\n      const by = transformed[(3 * i1) + 1]\n      const cx = transformed[3 * i2]\n      const cy = transformed[(3 * i2) + 1]\n      const det = ((bx - ax) * (cy - ay)) - ((by - ay) * (cx - ax))\n      if (det < 0) {\n        continue\n      }\n\n      const points = []\n      let zmax = -Infinity\n      let zmin = Infinity\n      const element = poly.svg\n      for (let j = 0; j < 3; ++j) {\n        const idx = indices[j]\n        points.push(\n          `${0.5 * w * (1.0 - transformed[3 * idx])},${\n            0.5 * h * (1.0 - transformed[(3 * idx) + 1])}`,\n        )\n        const z = transformed[(3 * idx) + 2]\n        zmax = Math.max(zmax, z)\n        zmin = Math.min(zmin, z)\n      }\n      poly.zIndex = zmax + (0.25 * zmin)\n      const joinedPoints = points.join(' ')\n\n      if (joinedPoints.indexOf('NaN') === -1) {\n        setAttribute(element, 'points', joinedPoints)\n      }\n\n      toDraw.push(poly)\n    }\n    toDraw.sort(compareZ)\n    container.innerHTML = ''\n    for (i = 0; i < toDraw.length; ++i) {\n      container.appendChild(toDraw[i].svg)\n    }\n  }\n}\n\nfunction calculateSizingOptions (options = {}) {\n  let width = options.width || 400\n  let height = options.height || 400\n\n  if (!options.pxNotRatio) {\n    width = (window.innerWidth * (options.width || 0.25)) | 0\n    height = ((window.innerHeight * options.height) || width) | 0\n\n    if ('minWidth' in options && width < options.minWidth) {\n      width = options.minWidth\n      height = (options.minWidth * options.height / options.width) | 0\n    }\n  }\n  return { width, height }\n}\n\nfunction createNode (type) {\n  return document.createElementNS(SVG_NS, type)\n}\n\nfunction setAttribute (node, attribute, value) {\n  node.setAttributeNS(null, attribute, value)\n}\n\nfunction svgElementToSvgImageContent (svgElement) {\n  const inner = svgElement.innerHTML\n  const head = `<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\"> ` +\n  `<svg width=\"521px\" height=\"521px\" version=\"1.1\" baseProfile=\"full\" xmlns=\"${SVG_NS}\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:ev=\"http://www.w3.org/2001/xml-events\">`\n  const foot = '</svg>'\n  const content = head + inner + foot\n  return content\n}\n\nfunction Polygon (svg, indices) {\n  this.svg = svg\n  this.indices = indices\n  this.zIndex = 0\n}\n"]},"metadata":{},"sourceType":"script"}